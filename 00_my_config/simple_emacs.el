;;; simple_emacs.el --- –ú–æ–π –º–∏–Ω–∏–º–∞–ª–∏—Å—Ç–∏—á–Ω—ã–π –∏ –ø–æ–Ω—è—Ç–Ω—ã–π –∫–æ–Ω—Ñ–∏–≥ Emacs -*- lexical-binding: t; -*-

;; –≠—Ç–æ—Ç –∫–æ–Ω—Ñ–∏–≥ —Å–æ–∑–¥–∞–Ω –∫–∞–∫ —É—á–µ–±–Ω—ã–π –∏ –ø—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏–π –ø—Ä–æ–µ–∫—Ç.
;; –û–Ω –≤–∫–ª—é—á–∞–µ—Ç –≤ —Å–µ–±—è –≤—Å–µ –±–∞–∑–æ–≤—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ Emacs, –∫–æ—Ç–æ—Ä—ã–µ –¥–µ–ª–∞—é—Ç —Ä–∞–±–æ—Ç—É –ø—Ä–æ—â–µ –∏ –ø–æ–Ω—è—Ç–Ω–µ–µ.
;; –Ø –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ –∏–∑—É—á–∞—é Emacs –∏ —É–ø—Ä–æ—â–∞—é –µ–≥–æ, –¥–æ–±–∞–≤–ª—è—è –≥–æ—Ä—è—á–∏–µ –∫–ª–∞–≤–∏—à–∏ –∏ –æ–±—ä—è—Å–Ω–µ–Ω–∏—è –∫ –Ω–∏–º.

;; ------------------------------
;; üìå –°–ø–∏—Å–æ–∫ –≥–æ—Ä—è—á–∏—Ö –∫–ª–∞–≤–∏—à
;; ------------------------------
;; C-c r     ‚Äî –æ–±–Ω–æ–≤–∏—Ç—å –∫–æ–Ω—Ñ–∏–≥ –±–µ–∑ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞ (simple/reload-config)
;; C-c c y   ‚Äî –æ—Ç–∫—Ä—ã—Ç—å *scratch* –±—É—Ñ–µ—Ä (simple/open-scratch)
;; C-c t o   ‚Äî –æ—Ç–∫—Ä—ã—Ç—å —Ñ–∞–π–ª –∑–∞–¥–∞—á tasks.org (simple/open-tasks-file)
;; C-c t i   ‚Äî –æ—Ç–∫—Ä—ã—Ç—å —Ñ–∞–π–ª –∑–∞–¥–∞—á inbox_tasks.org (simple/open-inbox-file)
;; C-c q     ‚Äî –∑–∞–∫—Ä—ã—Ç—å –≤—Å–µ –æ–∫–Ω–∞ –∏ –±—É—Ñ–µ—Ä—ã, –∫—Ä–æ–º–µ —Ç–µ–∫—É—â–µ–≥–æ (my/cleanup-workspace)
;; RET       ‚Äî –≤ —Å—Ç—Ä–æ–∫–µ —á–µ–∫-–ª–∏—Å—Ç–∞ –≤—Å—Ç–∞–≤–ª—è–µ—Ç –Ω–æ–≤—É—é —Å—Ç—Ä–æ–∫—É - [ ]
;; Delete    ‚Äî —É–¥–∞–ª—è–µ—Ç —Å–∏–º–≤–æ–ª –ø–æ–¥ –∫—É—Ä—Å–æ—Ä–æ–º (–≤–º–µ—Å—Ç–æ backspace-–ø–æ–¥–æ–±–Ω–æ–≥–æ –ø–æ–≤–µ–¥–µ–Ω–∏—è)
;; Ctrl+S    ‚Äî —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ç–µ–∫—É—â–∏–π –±—É—Ñ–µ—Ä (save-buffer)
;; C-c m     ‚Äî –æ—Ç–∫—Ä—ã—Ç—å —Ñ–∞–π–ª —Å–æ —Å–ª–æ–≤–∞—Ä—ë–º —Ö–æ—Ç–∫–µ–µ–≤ (my/open-shortcuts-dict) [–¥–æ–±–∞–≤–∏–º –Ω–∏–∂–µ]


;; ------------------------------
;; 1. –£–ø—Ä–æ—â–µ–Ω–∏–µ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è: CUA Mode
;; ------------------------------
(cua-mode 1)

;; –ù–∞–∑–Ω–∞—á–∞–µ–º Ctrl+S –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –±—É—Ñ–µ—Ä–∞ (–Ω–∞ —Å–ª—É—á–∞–π, –µ—Å–ª–∏ –æ—Ç–∫–ª—é—á–µ–Ω–æ)
(global-set-key (kbd "C-s") #'save-buffer)

;; ------------------------------
;; 2. –ñ—ë—Å—Ç–∫–∏–π –ø–µ—Ä–µ–Ω–æ—Å —Å—Ç—Ä–æ–∫
;; ------------------------------
(setq-default fill-column 100)
(add-hook 'text-mode-hook #'turn-on-auto-fill)
(add-hook 'org-mode-hook  #'turn-on-auto-fill)
(require 'display-fill-column-indicator)
(add-hook 'prog-mode-hook #'display-fill-column-indicator-mode)
(add-hook 'text-mode-hook #'display-fill-column-indicator-mode)
(add-hook 'org-mode-hook  #'display-fill-column-indicator-mode)


;; ------------------------------
;; 2.1 ... –∏ –º—è–≥–∫–∏–π —Ç–æ–∂–µ 
;; ------------------------------

(add-hook 'org-mode-hook #'visual-line-mode)


;; ------------------------------
;; 3. –•—Ä–∞–Ω–µ–Ω–∏–µ –±—ç–∫–∞–ø–æ–≤ –∏ –∞–≤—Ç–æ—Å–µ–π–≤–æ–≤ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–π –ø–∞–ø–∫–µ
;; ------------------------------
;; üì¶ –ë—ç–∫–∞–ø—ã –≤ –æ—Ç–¥–µ–ª—å–Ω—É—é –ø–∞–ø–∫—É, –±–µ–∑ –ø–æ–ø—ã—Ç–∫–∏ –∏–∑–º–µ–Ω–∏—Ç—å ACL
(setq backup-by-copying t) ;; <-- –Ω–æ–≤–∞—è —Å—Ç—Ä–æ–∫–∞

(make-directory (expand-file-name "../../04_archive/backups" (file-name-directory load-file-name)) t)
(setq backup-directory-alist
      `((".*" . ,(expand-file-name "../../04_archive/backups" (file-name-directory load-file-name)))))


;; üì¶ –ê–≤—Ç–æ—Å–µ–π–≤—ã –≤ –æ—Ç–¥–µ–ª—å–Ω—É—é –ø–∞–ø–∫—É, –±–µ–∑ –ø–æ–ø—ã—Ç–∫–∏ –∏–∑–º–µ–Ω–∏—Ç—å ACL
(make-directory (expand-file-name "../../04_archive/autosaves" (file-name-directory load-file-name)) t)
(setq auto-save-file-name-transforms
      `((".*" ,(expand-file-name "../../04_archive/autosaves" (file-name-directory load-file-name)) t)))

;; ------------------------------
;; 4. –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥–∞ –±–µ–∑ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞
;; ------------------------------
(defvar my-config-base-dir (file-name-directory (or load-file-name (buffer-file-name)))
  "–ë–∞–∑–æ–≤–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –¥–ª—è –∫–æ–Ω—Ñ–∏–≥–∞.")

(defun simple/reload-config ()
  "–ó–∞–≥—Ä—É–∂–∞–µ—Ç init.el –±–µ–∑ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞ Emacs."
  (interactive)
  (let ((init-file (expand-file-name "../init.el" my-config-base-dir)))
    (load-file init-file)
    (message "‚úÖ init.el –æ–±–Ω–æ–≤–ª—ë–Ω: %s" init-file)))

(global-set-key (kbd "C-c r") #'simple/reload-config)

;; ------------------------------
;; 5. –®–æ—Ä—Ç–∫–∞—Ç –¥–ª—è –æ—Ç–∫—Ä—ã—Ç–∏—è *scratch*
;; ------------------------------
(defun simple/open-scratch ()
  "–û—Ç–∫—Ä—ã–≤–∞–µ—Ç *scratch* –±—É—Ñ–µ—Ä. –ï—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç ‚Äî —Å–æ–∑–¥–∞—ë—Ç."
  (interactive)
  (switch-to-buffer "*scratch*")
  (unless (eq major-mode 'lisp-interaction-mode)
    (lisp-interaction-mode)))

(global-set-key (kbd "C-c c y") #'simple/open-scratch)

;; ------------------------------
;; 6. –®–æ—Ä—Ç–∫–∞—Ç –¥–ª—è –æ—Ç–∫—Ä—ã—Ç–∏—è —Ñ–∞–π–ª–∞ –∑–∞–¥–∞—á
;; ------------------------------

(defvar my-config-base-dir (file-name-directory (or load-file-name (buffer-file-name)))
  "–ë–∞–∑–æ–≤–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –¥–ª—è –∫–æ–Ω—Ñ–∏–≥–∞.")

(global-set-key (kbd "C-c t o") (lambda ()
                                  (interactive)
                                  (let ((file-path (expand-file-name "../../task-tracker/tasks.org" my-config-base-dir)))
                                    (find-file file-path))))


;; ------------------------------
;; 6.1 –®–æ—Ä—Ç–∫–∞—Ç –¥–ª—è –æ—Ç–∫—Ä—ã—Ç–∏—è —Ñ–∞–π–ª–∞ inbox
;; ------------------------------

(global-set-key (kbd "C-c t i") (lambda ()
                                  (interactive)
                                  (let ((file-path (expand-file-name "../../task-tracker/inbox_tasks.org" my-config-base-dir)))
                                    (find-file file-path))))


;; ------------------------------
;; 7. –£–º–Ω–æ–µ –ø–æ–≤–µ–¥–µ–Ω–∏–µ RET –≤ —á–µ–∫-–ª–∏—Å—Ç–∞—Ö
;; ------------------------------
(defun simple/org-return-dwim ()
  "–ï—Å–ª–∏ –∫—É—Ä—Å–æ—Ä –≤ —Å—Ç—Ä–æ–∫–µ —á–µ–∫-–ª–∏—Å—Ç–∞, –≤—Å—Ç–∞–≤–ª—è–µ—Ç –Ω–æ–≤—É—é —Å—Ç—Ä–æ–∫—É —Å '- [ ]'. –ò–Ω–∞—á–µ –≤—ã–∑—ã–≤–∞–µ—Ç —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ –ø–æ–≤–µ–¥–µ–Ω–∏–µ RET."
  (interactive)
  (if (and (eq major-mode 'org-mode)
           (save-excursion
             (beginning-of-line)
             (looking-at "^\\s-*[-*] \\[.\\] ")))
      (progn
        (end-of-line)
        (insert "\n- [ ] "))
    (org-return)))

(with-eval-after-load 'org
  (define-key org-mode-map (kbd "RET") #'simple/org-return-dwim))

;; ------------------------------
;; 8. –®–æ—Ä—Ç–∫–∞—Ç –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ —Ä–∞–±–æ—á–µ–π –æ–±–ª–∞—Å—Ç–∏
;; ------------------------------
(defun my/cleanup-workspace ()
  "–ó–∞–∫—Ä—ã—Ç—å –≤—Å–µ –æ–∫–Ω–∞ –∏ –±—É—Ñ–µ—Ä—ã, –∫—Ä–æ–º–µ —Ç–µ–∫—É—â–µ–≥–æ.
–ü–æ–ª–µ–∑–Ω–æ, –∫–æ–≥–¥–∞ –æ—Ç–∫—Ä—ã—Ç–æ –º–Ω–æ–≥–æ –≤—Å–µ–≥–æ, –∞ —Ö–æ—á–µ—Ç—Å—è —Å–æ—Å—Ä–µ–¥–æ—Ç–æ—á–∏—Ç—å—Å—è –Ω–∞ –æ–¥–Ω–æ–π –∑–∞–¥–∞—á–µ."
  (interactive)
  (delete-other-windows)
  (kill-other-buffers))

(global-set-key (kbd "C-c q") #'my/cleanup-workspace)

;; ------------------------------
;; 9. –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Delete –∫–∞–∫ forward-delete
;; ------------------------------
(global-set-key [delete] 'delete-char)

;; ------------------------------
;; 10. –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–ª–æ–≤–∞—Ä—è —à–æ—Ä—Ç-–∫–∞—Ç–æ–≤
;; ------------------------------

(defun my/generate-shortcuts-dictionary (source-dir output-file)
  "–°–æ–±–∏—Ä–∞–µ—Ç –æ–ø–∏—Å–∞–Ω–∏—è –∏–∑ .el-—Ñ–∞–π–ª–æ–≤ –≤ SOURCE-DIR –∏ –ø–∏—à–µ—Ç –∏—Ö –≤ OUTPUT-FILE (Org-—Ñ–∞–π–ª).
–û–ø–∏—Å–∞–Ω–∏–µ –±–µ—Ä—ë—Ç—Å—è –∏–∑ –Ω–∞—á–∞–ª—å–Ω—ã—Ö –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤ (–¥–æ –ø–µ—Ä–≤–æ–π —Ñ—É–Ω–∫—Ü–∏–∏/–Ω–∞—Å—Ç—Ä–æ–π–∫–∏)."
  (interactive
   (list
    (read-directory-name "–î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è —Å –∫–æ–Ω—Ñ–∏–≥–∞–º–∏: " "~/.emacs.d/")
    (read-file-name "–§–∞–π–ª –¥–ª—è –∑–∞–ø–∏—Å–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤: " "~/.emacs.d/" "dict_shortcat.org")))
  (let ((files (directory-files-recursively source-dir "\\.el$"))
        (found-entries '()))
    (dolist (file files)
      (let (this-file-header)
        (with-temp-buffer
          (insert-file-contents file)
          (goto-char (point-min))
          ;; –°–æ–±–∏—Ä–∞–µ–º —Ç–æ–ª—å–∫–æ –Ω–∞—á–∞–ª—å–Ω—ã–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ ‚Äî —Å—Ç—Ä–æ–∫–∏, –Ω–∞—á–∏–Ω–∞—é—â–∏–µ—Å—è —Å ;
          ;; –¥–æ –ø–µ—Ä–≤–æ–π "–Ω–∞—Å—Ç–æ—è—â–µ–π" —Å—Ç—Ä–æ–∫–∏ –∫–æ–¥–∞
          (while (and (not (eobp))
                      (looking-at "^\\s-*\\(;\\|$\\)"))
            (let ((line (string-trim
                         (buffer-substring-no-properties
                          (line-beginning-position)
                          (line-end-position)))))
              (when (and (not (string= line ""))
                         (string-prefix-p ";" line)
                         ;; –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –¥–∏—Ä–µ–∫—Ç–∏–≤—ã –≤—Ä–æ–¥–µ lexical-binding, provide –∏ —Ç.–ø.
                         (not (string-match-p "lexical-binding\\|provide\\|\\*-" line))
                         ;; –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏ –≤—Ä–æ–¥–µ "----"
                         (not (string-match-p "^;+\\s-*[-‚îÄ‚Äî]+" line)))
                (push (string-trim (replace-regexp-in-string "^;+\\s-*" "" line))
                      this-file-header)))
            (forward-line 1)))
        (when this-file-header
          (push (list file (reverse this-file-header)) found-entries))))
    ;; –ü–∏—à–µ–º –≤ org-—Ñ–∞–π–ª
    (with-temp-buffer
      (insert "#+TITLE: –°–ª–æ–≤–∞—Ä—å –≥–æ—Ä—è—á–∏—Ö –∫–ª–∞–≤–∏—à\n")
      (insert (format "# –ì–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ: %s\n\n" (current-time-string)))
      (dolist (entry (reverse found-entries))
        (let ((file-name (file-name-nondirectory (nth 0 entry)))
              (desc-lines (nth 1 entry)))
          (insert (format "* %s\n" file-name))
          (dolist (line desc-lines)
            (insert (format ": %s\n" line)))
          (insert "\n")))
      (write-region (point-min) (point-max) output-file))
    (message "‚úÖ –°–ª–æ–≤–∞—Ä—å –æ–ø–∏—Å–∞–Ω–∏–π —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω: %s" output-file)))



(global-set-key (kbd "C-c m") #'my/generate-and-open-shortcuts-dict)

(provide 'simple_emacs)
