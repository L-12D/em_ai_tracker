;;; journal-manager.el --- –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –¥–Ω–µ–≤–Ω–∏–∫–æ–º + —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞, –º–∏–Ω–∏–º–∞–ª–∏—Å—Ç–∏—á–Ω–∞—è —Å—Å—ã–ª–∫–∞, –∑–∞—â–∏—Ç–∞ –æ—Ç –¥—É–±–ª–∏ -*- lexical-binding: t; -*-

;;; –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π:
;; –≠—Ç–æ—Ç –º–æ–¥—É–ª—å:
;; 1) –û—Ç–∫—Ä—ã–≤–∞–µ—Ç –∏–ª–∏ —Å–æ–∑–¥–∞—ë—Ç –¥–Ω–µ–≤–Ω–∏–∫ –∑–∞ —Å–µ–≥–æ–¥–Ω—è
;; 2) –î–æ–±–∞–≤–ª—è–µ—Ç –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã–µ/—Å–µ–≥–æ–¥–Ω—è—à–Ω–∏–µ TODO-–∑–∞–¥–∞—á–∏, —Å–æ—Ä—Ç–∏—Ä—É—è –∏—Ö –ø–æ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç—É
;; 3) –í—Å—Ç–∞–≤–ª—è–µ—Ç –∫–æ–º–ø–∞–∫—Ç–Ω—É—é —Å—Å—ã–ª–∫—É `[üîó]`, –≤–µ–¥—É—â—É—é –ø–æ–∏—Å–∫ –ø–æ –∑–∞–≥–æ–ª–æ–≤–∫—É
;; 4) –°–æ–∑–¥–∞—ë—Ç –¥–∏—Ä–µ–∫—Ç–∏–≤—É `#+transclude: [[id:...]]` –¥–ª—è ¬´–∂–∏–≤–æ–≥–æ¬ª –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø—Ä–∏ –≤–∫–ª—é—á—ë–Ω–Ω–æ–º org-transclusion-mode
;; 5) –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ ID
;; 6) **–ù–µ –¥–æ–±–∞–≤–ª—è–µ—Ç –ø–æ–≤—Ç–æ—Ä–Ω–æ** —Ç—É –∂–µ –∑–∞–¥–∞—á—É (–æ–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–æ ID), –µ—Å–ª–∏ –æ–Ω–∞ —É–∂–µ –µ—Å—Ç—å –≤ –¥–Ω–µ–≤–Ω–∏–∫–µ

(require 'org)
(require 'org-journal)
(require 'org-transclusion nil :noerror) ;; –µ—Å–ª–∏ –ø–∞–∫–µ—Ç –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω, –Ω–µ —É–ø–∞–¥—ë–º

;; ------------------------------
;; 1. –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π –∏ —Ñ–∞–π–ª–æ–≤
;; ------------------------------

(defconst my/journal-dir
  (expand-file-name "../journal" (file-name-directory (or load-file-name buffer-file-name)))
  "–ü—É—Ç—å –∫ –ø–∞–ø–∫–µ, –≥–¥–µ —Ö—Ä–∞–Ω—è—Ç—Å—è —Ñ–∞–π–ª—ã –¥–Ω–µ–≤–Ω–∏–∫–∞ (org-journal).")

(defconst my/journal-task-files
  (list
   (expand-file-name "../task-tracker/tasks.org"
                     (file-name-directory (or load-file-name buffer-file-name)))
   (expand-file-name "../task-tracker/inbox_tasks.org"
                     (file-name-directory (or load-file-name buffer-file-name))))
  "–°–ø–∏—Å–æ–∫ Org-—Ñ–∞–π–ª–æ–≤, –æ—Ç–∫—É–¥–∞ –±–µ—Ä—ë–º –∑–∞–¥–∞—á–∏ –¥–ª—è –¥–Ω–µ–≤–Ω–∏–∫–∞.")

(setq org-journal-dir my/journal-dir
      org-journal-file-format "%Y%m%d.org"
      org-journal-file-header nil
      org-journal-enable-agenda-integration t)

;; ------------------------------
;; ‚öôÔ∏è 2. –ì–æ—Ä—è—á–∏–µ –∫–ª–∞–≤–∏—à–∏ (–ø—Ä–∏–º–µ—Ä)
;; ------------------------------
;; (global-set-key (kbd "C-c j") 'my/journal-open-today-and-update)
;; (global-set-key (kbd "C-c t u") 'my/update-journal-with-tasks)
;; (global-set-key (kbd "C-c t w") 'org-transclusion-mode)

;; ------------------------------
;; üìé –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –¥–ª—è –∞–≥–µ–Ω—Ç–æ–≤ / –∞–≤—Ç–æ–≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–æ–≤ –∫–æ–Ω—Ñ–∏–≥–æ–≤
;; ------------------------------
;; –ß—Ç–æ–±—ã –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–ª–∞—Å—å –≥–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–ª–æ–≤–∞—Ä—è —à–æ—Ä—Ç–∫–∞—Ç–æ–≤:
;; (global-set-key (kbd "C-c j") 'my/journal-open-today-and-update) ;; –æ—Ç–∫—Ä—ã—Ç—å –¥–Ω–µ–≤–Ω–∏–∫ + –æ–±–Ω–æ–≤–∏—Ç—å
;; (global-set-key (kbd "C-c t u") 'my/update-journal-with-tasks)   ;; –æ–±–Ω–æ–≤–∏—Ç—å –¥–Ω–µ–≤–Ω–∏–∫
;; (global-set-key (kbd "C-c t w") 'org-transclusion-mode)          ;; –≤–∫–ª—é—á–∏—Ç—å/–≤—ã–∫–ª—é—á–∏—Ç—å —Ç—Ä–∞–Ω—Å–∫–ª—é–∑–∏—é

;; ------------------------------
;; 3. –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è ID (—á—Ç–æ–±—ã org-transclusion –ø–æ [[id:...]] —Ä–∞–±–æ—Ç–∞–ª–æ)
;; ------------------------------

(defun my/register-all-ids-in-file ()
  "–ü—Ä–æ—á–∏—Ç–∞—Ç—å –≤—Å–µ –∑–∞–≥–æ–ª–æ–≤–∫–∏ —Ç–µ–∫—É—â–µ–≥–æ Org-—Ñ–∞–π–ª–∞ –∏ –¥–æ–±–∞–≤–∏—Ç—å –∏—Ö :ID: –≤ org-id-locations.
–ü–æ–ª–µ–∑–Ω–æ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —Å–æ–±—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∞ ID (YYYYMMDD-HHMMSS)."
  (when (derived-mode-p 'org-mode)
    (save-excursion
      (goto-char (point-min))
      (org-map-entries
       (lambda ()
         (let ((this-id (org-entry-get nil "ID")))
           (when (and this-id (not (string-empty-p this-id)))
             (org-id-add-location this-id (buffer-file-name)))))
       nil 'file))))

(add-hook 'org-mode-hook #'my/register-all-ids-in-file)

;; ------------------------------
;; 4. –û—Ç–∫—Ä—ã—Ç—å –¥–Ω–µ–≤–Ω–∏–∫ (—Å –∞–≤—Ç–æ–¥–æ–±–∞–≤–ª–µ–Ω–∏–µ–º + –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ)
;; ------------------------------

(defun my/journal-open-today-and-update ()
  "–û—Ç–∫—Ä—ã—Ç—å/—Å–æ–∑–¥–∞—Ç—å –¥–Ω–µ–≤–Ω–∏–∫ –∑–∞ —Å–µ–≥–æ–¥–Ω—è –∏ —Å—Ä–∞–∑—É –æ–±–Ω–æ–≤–∏—Ç—å —Å–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á."
  (interactive)
  (my/journal-open-today)
  (my/update-journal-with-tasks))

(defun my/journal-open-today ()
  "–û—Ç–∫—Ä—ã—Ç—å –∏–ª–∏ —Å–æ–∑–¥–∞—Ç—å —Ñ–∞–π–ª –¥–Ω–µ–≤–Ω–∏–∫–∞ (org-journal) –∑–∞ —Å–µ–≥–æ–¥–Ω—è.
–ï—Å–ª–∏ —Ñ–∞–π–ª –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –¥–æ–±–∞–≤–∏–º —Å–µ–∫—Ü–∏–∏ * –°–ø—Ä–∞–≤–æ—á–Ω–∏–∫ –∏ * Notes."
  (interactive)
  (unless (file-directory-p my/journal-dir)
    (make-directory my/journal-dir t))
  (let* ((fname (format-time-string org-journal-file-format))
         (full-path (expand-file-name fname my/journal-dir)))
    (find-file full-path)
    (unless (file-exists-p full-path)
      (insert (format \"#+title: %s\\n\\n\" (format-time-string \"%A, %d %B %Y\")))
      (insert \"* –°–ø—Ä–∞–≤–æ—á–Ω–∏–∫\\n:PROPERTIES:\\n:VISIBILITY: folded\\n:END:\\n\"
              \"- —à–æ—Ä—Ç-–∫–∞—Ç—ã ‚Äî C-c m\\n\\n\"
              \"* Notes\\n\")
      (save-buffer)
      (message \"–°–æ–∑–¥–∞–Ω –Ω–æ–≤—ã–π –¥–Ω–µ–≤–Ω–∏–∫ –∑–∞ —Å–µ–≥–æ–¥–Ω—è.\"))))

;; ------------------------------
;; 5. –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–Ω–µ–≤–Ω–∏–∫–∞ (—Å –∑–∞—â–∏—Ç–æ–π –æ—Ç –¥—É–±–ª–∏)
;; ------------------------------

(defun my/update-journal-with-tasks ()
  \"–î–æ–±–∞–≤–∏—Ç—å –≤ –¥–Ω–µ–≤–Ω–∏–∫ –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã–µ/—Å–µ–≥–æ–¥–Ω—è—à–Ω–∏–µ TODO-–∑–∞–¥–∞—á–∏ (—Å–æ —Å—Å—ã–ª–∫–æ–π –∏ —Ç—Ä–∞–Ω—Å–∫–ª—é–∑–∏–µ–π).
- –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç—É
- –°—Å—ã–ª–∫–∞ - –º–∏–Ω–∏–º–∞–ª–∏—Å—Ç–∏—á–Ω–∞—è '[üîó]', –≤–µ–¥—É—â–∞—è `::*–ó–∞–≥–æ–ª–æ–≤–æ–∫`
- –î–∏—Ä–µ–∫—Ç–∏–≤–∞ '#+transclude: [[id:...]]', –µ—Å–ª–∏ org-transclusion –¥–æ—Å—Ç—É–ø–µ–Ω
- –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –∑–∞–¥–∞—á–∏, —á–µ–π ID —É–∂–µ –µ—Å—Ç—å –≤ —Å–µ–∫—Ü–∏–∏ '–ó–∞–¥–∞—á–∏ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è –∏ –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã–µ', —á—Ç–æ–±—ã –Ω–µ –¥—É–±–ª–∏—Ä–æ–≤–∞—Ç—å.\"
  (interactive)
  (let* ((today (format-time-string \"<%Y-%m-%d>\"))
         (journal-file (expand-file-name (format-time-string org-journal-file-format)
                                         my/journal-dir))
         (org-files (append (directory-files my/journal-dir t \"\\\\.org$\")
                            my/journal-task-files))
         (tasks '()))
    ;; 1. –°–∫–∞–Ω–∏—Ä—É–µ–º todos
    (dolist (file org-files)
      (with-current-buffer (find-file-noselect file t)
        (org-map-entries
         (lambda ()
           (unless (org-entry-get nil \"ID\")
             (org-id-get-create))
           (let ((scheduled  (org-entry-get nil \"SCHEDULED\"))
                 (deadline   (org-entry-get nil \"DEADLINE\"))
                 (todo-state (org-get-todo-state))
                 (prio       (org-get-priority (org-get-heading t t)))
                 (my-id      (org-entry-get nil \"ID\"))
                 (heading    (org-get-heading t t)))
             (when (and (equal todo-state \"TODO\")
                        (or (and scheduled
                                 (or (string= scheduled today)
                                     (string-lessp scheduled today)))
                            (and deadline
                                 (or (string= deadline today)
                                     (string-lessp deadline today)))))
               (push (list prio file heading my-id) tasks))))
         nil 'file)))
    ;; 2. –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç—É
    (setq tasks (sort tasks (lambda (a b) (< (car a) (car b)))))

    (with-current-buffer (find-file-noselect journal-file t)
      ;; 3. –ù–∞–π–¥—ë–º —Å–µ–∫—Ü–∏—é, –∑–∞–ø–æ–º–Ω–∏–º —É–∂–µ –∏–º–µ—é—â–∏–µ—Å—è ID
      (goto-char (point-min))
      (let ((existing-ids '()))
        (when (re-search-forward \"^\\\\* –ó–∞–¥–∞—á–∏ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è –∏ –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã–µ\" nil t)
          (let ((sec-start (point))
                (sec-end (or (save-excursion
                                (re-search-forward \"^\\\\*\" nil t))
                              (point-max))))
            ;; –°–æ–±–∏—Ä–∞–µ–º ID –∏–∑ –¥–∏—Ä–µ–∫—Ç–∏–≤ `#+transclude: [[id:XXXX]]`
            (save-excursion
              (goto-char sec-start)
              (while (re-search-forward \"^#\\\\+transclude: \\\\[\\\\\\[id:\\([^]]+\\)\\\\]\\]\" sec-end t)
                (push (match-string 1) existing-ids)))) )

        ;; 4. –ï—Å–ª–∏ —Å–µ–∫—Ü–∏—è –µ—Å—Ç—å, —É–¥–∞–ª–∏–º –µ—ë, —á—Ç–æ–±—ã –ø–µ—Ä–µ—Å–æ–∑–¥–∞—Ç—å
        (goto-char (point-min))
        (when (re-search-forward \"^\\\\* –ó–∞–¥–∞—á–∏ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è –∏ –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã–µ\" nil t)
          (let ((start (match-beginning 0))
                (end   (or (save-excursion (re-search-forward \"^\\\\*\" nil t))
                           (point-max))))
            (delete-region start end)))

        ;; 5. –°–æ–∑–¥–∞—ë–º –∑–∞–Ω–æ–≤–æ –∑–∞–≥–æ–ª–æ–≤–æ–∫
        (goto-char (point-min))
        (insert \"* –ó–∞–¥–∞—á–∏ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è –∏ –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã–µ\\n\\n\")

        (dolist (task (reverse tasks))
          (let* ((my-id     (nth 3 task)))
            ;; –ï—Å–ª–∏ —ç—Ç–æ—Ç ID —É–∂–µ –µ—Å—Ç—å, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º
            (unless (member my-id existing-ids)
              (let* ((prio      (nth 0 task))
                     (file      (nth 1 task))
                     (heading   (nth 2 task))
                     (rel-file  (file-relative-name file my/journal-dir))
                     ;; –õ–∞–∫–æ–Ω–∏—á–Ω–∞—è —Å—Å—ã–ª–∫–∞ [üîó]
                     (link (format \"[[file:%s::*%s][üîó]]\" rel-file heading))
                     ;; –¢—Ä–∞–Ω—Å–∫–ª—é–∑–∏—è
                     (transclusion (format \"#+transclude: [[id:%s]]\" my-id)))
                (insert (format \"** %s %s\\n\" heading link))
                (when (featurep 'org-transclusion)
                  (insert (format \"%s\\n\\n\" transclusion))))))))

      (save-buffer))
    (message \"–î–Ω–µ–≤–Ω–∏–∫ –æ–±–Ω–æ–≤–ª—ë–Ω –∑–∞–¥–∞—á–∞–º–∏ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è.\")))
\n(provide 'journal-manager)\n;;; journal-manager.el ends here
