;;; task_manager-create_task.el --- –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–¥–∞—á –≤ tasks.org —Å ID, DEADLINE –∏ —Å—Ç–∞—Ç—É—Å–∞–º–∏ -*- lexical-binding: t; -*-

;; üìå –¶–µ–ª—å:
;; –£–ø—Ä–æ—â—ë–Ω–Ω–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ –∑–∞–¥–∞—á –≤ GTD-—Å–∏—Å—Ç–µ–º–µ.
;; –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç ID, DEADLINE, SCHEDULED, –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç—ã, —á–µ–∫-–ª–∏—Å—Ç—ã –∏ –≤—ã–±–æ—Ä —Ç–µ–≥–æ–≤.
;; –°–æ—Ö—Ä–∞–Ω—è–µ—Ç –∑–∞–¥–∞—á–∏ –≤ —Å–µ–∫—Ü–∏—é * Tasks —Ñ–∞–π–ª–∞ tasks.org.

;; ------------------------------
;; ‚öôÔ∏è  Keybindings
;; ------------------------------
;; C-c t c ‚Äî –æ—Ç–∫—Ä—ã—Ç—å —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —Å—Ç–∞—Ç—É—Å–æ–≤ (—á–µ—Ä–µ–∑ org-todo)
;; C-c t 1 ‚Äî —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç—É—Å INBOX
;; C-c t 2 ‚Äî —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç—É—Å TODO
;; C-c t 3 ‚Äî —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç—É—Å DONE
;; C-c t 4 ‚Äî —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç—É—Å LIFE (—Ä—É—á–Ω–æ–π –≤—ã–±–æ—Ä, –≤–Ω–µ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ —Ü–∏–∫–ª–∞)
;; C-c t t ‚Äî —Å–æ–∑–¥–∞—Ç—å –ø–æ–ª–Ω–æ—Ü–µ–Ω–Ω—É—é –∑–∞–¥–∞—á—É —Å –¥–µ–¥–ª–∞–π–Ω–∞–º–∏ –∏ —Ç–µ–≥–∞–º–∏ (my/create-task)
;; C-c t e ‚Äî –±—ã—Å—Ç—Ä–æ–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ INBOX-–∑–∞–¥–∞—á–∏ (my/quick-capture-task)

;; ------------------------------
;; üìé –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –¥–ª—è –∞–≥–µ–Ω—Ç–æ–≤ / –∞–≤—Ç–æ–≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–æ–≤ –∫–æ–Ω—Ñ–∏–≥–æ–≤
;; ------------------------------
;; (global-set-key (kbd "C-c t c") 'org-todo)
;; (global-set-key (kbd "C-c t 1") (lambda () (interactive) (org-todo "INBOX")))
;; (global-set-key (kbd "C-c t 2") (lambda () (interactive) (org-todo "TODO")))
;; (global-set-key (kbd "C-c t 3") (lambda () (interactive) (org-todo "DONE")))
;; (global-set-key (kbd "C-c t 4") (lambda () (interactive) (org-todo "LIFE")))
;; (global-set-key (kbd "C-c t t") 'my/create-task)
;; (global-set-key (kbd "C-c t e") 'my/quick-capture-task)

;; ------------------------------
;; ‚úÖ –®–∞–≥ 0: –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö —Å—Ç–∞—Ç—É—Å–æ–≤ –∑–∞–¥–∞—á
;; ------------------------------

(setq org-todo-keywords
      '((sequence "INBOX" "TODO" "DONE")
        (sequence "LIFE"))) ;; LIFE —Ç–µ–ø–µ—Ä—å –Ω–µ —É—á–∞—Å—Ç–≤—É–µ—Ç –≤ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–º —Ü–∏–∫–ª–µ C-c C-t

(setq org-log-repeat 'time)              ;; –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ –ø—Ä–∏ –ø–æ–≤—Ç–æ—Ä–µ
(setq org-todo-repeat-to-state "TODO")   ;; –ø—Ä–∏ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç—Å—è –≤ TODO

;; ------------------------------
;; üóÇÔ∏è –ü—É—Ç–∏ –∫ —Ñ–∞–π–ª–∞–º
;; ------------------------------

(defvar my/inbox-task-file
  "../../task-tracker/inbox_tasks.org"
  "–û—Å–Ω–æ–≤–Ω–æ–π —Ñ–∞–π–ª, –≤ –∫–æ—Ç–æ—Ä—ã–π –¥–æ–±–∞–≤–ª—è—é—Ç—Å—è –∑–∞–¥–∞—á–∏.")

(defvar my/tags-file
  (expand-file-name "tags.org" (file-name-directory my/inbox-task-file))
  "–§–∞–π–ª —Å –¥–æ—Å—Ç—É–ø–Ω—ã–º–∏ —Ç–µ–≥–∞–º–∏.")

;; ------------------------------
;; üî¢ –®–∞–≥ 1: –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —É–Ω–∏–∫–∞–ª—å–Ω–æ–≥–æ ID
;; ------------------------------

(defun my/generate-task-id ()
  "–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —É–Ω–∏–∫–∞–ª—å–Ω—ã–π ID –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ç–µ–∫—É—â–µ–π –¥–∞—Ç—ã –∏ –≤—Ä–µ–º–µ–Ω–∏."
  (format-time-string "%Y%m%d-%H%M%S"))

;; ------------------------------
;; üè∑Ô∏è –®–∞–≥ 2: –†–∞–±–æ—Ç–∞ —Å —Ç–µ–≥–∞–º–∏
;; ------------------------------

(defun my/read-tags-from-file ()
  "–ü—Ä–æ—á–∏—Ç–∞—Ç—å —Å–ø–∏—Å–æ–∫ —Ç–µ–≥–æ–≤ –∏–∑ —Ñ–∞–π–ª–∞ `tags.org`."
  (when (file-exists-p my/tags-file)
    (with-temp-buffer
      (insert-file-contents my/tags-file)
      (let ((tags '()))
        (org-mode)
        (org-map-entries
         (lambda ()
           (push (org-get-heading t t t t) tags)))
        (reverse tags)))))

(defun my/add-tag-to-file (tag)
  "–î–æ–±–∞–≤–∏—Ç—å TAG –≤ —Ñ–∞–π–ª `tags.org`, –µ—Å–ª–∏ –µ–≥–æ –µ—â—ë –Ω–µ—Ç."
  (unless (member tag (my/read-tags-from-file))
    (with-current-buffer (find-file-noselect my/tags-file)
      (goto-char (point-max))
      (insert "* " tag "\n")
      (save-buffer))))

(defun my/select-tags ()
  "–í—ã–±—Ä–∞—Ç—å –æ–¥–∏–Ω –∏–ª–∏ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ç–µ–≥–æ–≤ —Å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å—é –¥–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—ã–π."
  (let ((selected '())
        (available (my/read-tags-from-file))
        (done nil))
    (while (not done)
      (let* ((choice (completing-read
                      (format "üè∑Ô∏è –¢–µ–≥–∏ –≤—ã–±—Ä–∞–Ω—ã: %s\n–í—ã–±–µ—Ä–∏ —Ç–µ–≥ (–∏–ª–∏ –≤–≤–µ–¥–∏ –Ω–æ–≤—ã–π, Enter ‚Äî –∑–∞–≤–µ—Ä—à–∏—Ç—å): "
                              (if selected (string-join selected ", ") "‚Äî"))
                      available nil nil)))
        (if (string-empty-p choice)
            (setq done t)
          (progn
            (add-to-list 'selected choice)
            (my/add-tag-to-file choice)))))
    selected))

;; ------------------------------
;; ‚úçÔ∏è –®–∞–≥ 3: –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–¥–∞—á–∏
;; ------------------------------
(defun my/create-task ()
  "–°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é –∑–∞–¥–∞—á—É, –≥–¥–µ DEADLINE –∏ SCHEDULED –∏–¥—É—Ç –≤ –æ–¥–Ω—É —Å—Ç—Ä–æ–∫—É,
—Å —Ä—É—Å—Å–∫–∏–º –¥–Ω—ë–º –Ω–µ–¥–µ–ª–∏, –∏ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç –∑–∞–ø–∏—Å—ã–≤–∞–µ—Ç—Å—è –∫–∞–∫ [#A] (–∏ #+PRIORITY: A).
–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –º–æ–∂–µ—Ç –≤—ã–±—Ä–∞—Ç—å, —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—Ç—å –ª–∏ DEADLINE –∏ SCHEDULED —á–µ—Ä–µ–∑ '1' –∏–ª–∏ '2'.
–î–ª—è SCHEDULED –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è –ø–æ–≤—Ç–æ—Ä—è–µ–º–æ—Å—Ç—å (–Ω–∞–ø—Ä–∏–º–µ—Ä, ++1w)."
  (interactive)

  ;; 1) –í–≤–æ–¥ –Ω–∞–∑–≤–∞–Ω–∏—è –∏ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞ (–ê/–ë/–°/–ì)
  (let* ((title-raw (read-string "–ù–∞–∑–≤–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏ (—Å –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–æ–º –ê/–ë/–í/–ì –≤ –∫–æ–Ω—Ü–µ): "))
         (priority-char (when (string-match "[[:space:]]\\([–ê–ë–í–ì–∞–±–≤–≥]\\)$" title-raw)
                          (upcase (match-string 1 title-raw))))
         (priority-code
          (pcase priority-char
            ("–ê" "A") ("–ë" "B") ("–í" "B") ("–°" "B") ("–ì" "C") (_ nil)))
         (title (if priority-code
                    (string-trim-right title-raw "[[:space:]][–ê–ë–í–ì–∞–±–≤–≥]$")
                  title-raw))
         (bracket-prio (if priority-code (format " [#%s]" priority-code) ""))
         (priority-prop (if priority-code (format "#+PRIORITY: %s\n" priority-code) ""))

         ;; 2) –í—ã–±–æ—Ä —É—Å—Ç–∞–Ω–æ–≤–∫–∏ DEADLINE –∏ SCHEDULED —á–µ—Ä–µ–∑ '1' –∏–ª–∏ '2'
         (set-deadline (eq (read-char-choice "–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å DEADLINE? (1 - –¥–∞, 2 - –Ω–µ—Ç): " '(?1 ?2)) ?1))
         (deadline-time (if set-deadline (org-read-date nil t nil "–í—ã–±–µ—Ä–∏—Ç–µ DEADLINE: ") nil))
         (set-scheduled (eq (read-char-choice "–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å SCHEDULED? (1 - –¥–∞, 2 - –Ω–µ—Ç): " '(?1 ?2)) ?1))
         (scheduled-time (if set-scheduled (org-read-date nil t nil "–í—ã–±–µ—Ä–∏—Ç–µ SCHEDULED: ") nil))
         ;; –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –ø–æ–≤—Ç–æ—Ä—è–µ–º–æ—Å—Ç–∏ –¥–ª—è SCHEDULED
         (scheduled-repeat (if set-scheduled
                               (let ((raw (read-string "–ü–æ–≤—Ç–æ—Ä—è–µ–º–æ—Å—Ç—å (–Ω–∞–ø—Ä–∏–º–µ—Ä 1w –∏–ª–∏ 3d, Enter ‚Äî –±–µ–∑ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è): ")))
                                 (if (string-empty-p raw) ""
                                   (if (string-match-p "^\\+\\+" raw) raw (concat "++" raw))))
                             ""))

         ;; –°–ø–∏—Å–æ–∫ —Ä—É—Å—Å–∫–∏—Ö –¥–Ω–µ–π –Ω–µ–¥–µ–ª–∏
         (rus-days '("–ü–Ω" "–í—Ç" "–°—Ä" "–ß—Ç" "–ü—Ç" "–°–±" "–í—Å"))

         ;; –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º DEADLINE –∏ SCHEDULED –≤ –æ–¥–Ω—É —Å—Ç—Ä–æ–∫—É —Å —É—á–µ—Ç–æ–º –ø–æ–≤—Ç–æ—Ä—è–µ–º–æ—Å—Ç–∏
         (deadline-sched-line
          (cond
           ((and (null deadline-time) (null scheduled-time)) "")
           ((and deadline-time (null scheduled-time))
            (format "DEADLINE: <%s %s>"
                    (format-time-string "%Y-%m-%d" deadline-time)
                    (nth (1- (nth 6 (decode-time deadline-time))) rus-days)))
           ((and (null deadline-time) scheduled-time)
            (format "SCHEDULED: <%s %s%s>"
                    (format-time-string "%Y-%m-%d" scheduled-time)
                    (nth (1- (nth 6 (decode-time scheduled-time))) rus-days)
                    (if (string-empty-p scheduled-repeat) "" (concat " " scheduled-repeat))))
           (t (format "DEADLINE: <%s %s> SCHEDULED: <%s %s%s>"
                      (format-time-string "%Y-%m-%d" deadline-time)
                      (nth (1- (nth 6 (decode-time deadline-time))) rus-days)
                      (format-time-string "%Y-%m-%d" scheduled-time)
                      (nth (1- (nth 6 (decode-time scheduled-time))) rus-days)
                      (if (string-empty-p scheduled-repeat) "" (concat " " scheduled-repeat))))))

         ;; 3) –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º ID –∏ —Å—Ç–∞—Ç—É—Å
         (id (my/generate-task-id))
         (status "INBOX")

         ;; 4) –ß–µ–∫-–ª–∏—Å—Ç
         (checklist-lines '())
         (item "")
         (_ (while (not (string-empty-p
                         (setq item (read-string "üìã –ü—É–Ω–∫—Ç —á–µ–∫-–ª–∏—Å—Ç–∞ (Enter ‚Äî –∑–∞–≤–µ—Ä—à–∏—Ç—å): "))))
              (push (format "- [ ] %s" item) checklist-lines)))
         (checklist (if checklist-lines (concat (string-join (reverse checklist-lines) "\n") "\n") ""))

         ;; 5) –¢–µ–≥–∏
         (chosen-tags (my/select-tags))
         (tag-string (if chosen-tags (format ":%s:" (string-join chosen-tags ":")) ""))

         ;; 6) –ò—Ç–æ–≥–æ–≤–∞—è —Å–±–æ—Ä–∫–∞
         (entry (concat "* " status bracket-prio " " title " " tag-string "\n"
                        (unless (string-empty-p deadline-sched-line) (concat deadline-sched-line "\n"))
                        ":PROPERTIES:\n"
                        ":ID:       " id "\n"
                        ":END:\n"
                        priority-prop
                        "#+DESCRIPTION:\n#+LINKS:\n"
                        checklist)))

    ;; 7) –í—Å—Ç–∞–≤–∫–∞ –≤ —Ñ–∞–π–ª
    (with-current-buffer (find-file-noselect my/inbox-task-file)
      (goto-char (point-min))
      (if (re-search-forward "^\\* Tasks" nil t)
          (forward-line 1)
        (goto-char (point-min))
        (insert "* Tasks\n"))
      (insert entry "\n")
      (save-buffer))

    (message "‚úÖ –ó–∞–¥–∞—á–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞: %s (ID: %s)" title id)))

;; ------------------------------
;; üèÉ‚Äç‚ôÇÔ∏è –®–∞–≥ 4: –ë—ã—Å—Ç—Ä–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏ —á–µ—Ä–µ–∑ C-c t e
;; ------------------------------

(defun my/quick-capture-task ()
  "–ë—ã—Å—Ç—Ä–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ INBOX-–∑–∞–¥–∞—á–∏. –ú–∏–Ω–∏–º—É–º –ø–æ–ª–µ–π: —Ç–æ–ª—å–∫–æ –Ω–∞–∑–≤–∞–Ω–∏–µ (–∏ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç).\n–ú–æ–∂–Ω–æ –ø—Ä–∏ –∂–µ–ª–∞–Ω–∏–∏ —É–∫–∞–∑–∞—Ç—å SCHEDULED (–æ–¥–Ω—É –¥–∞—Ç—É), –∏ —á–µ–∫-–ª–∏—Å—Ç. –ë–µ–∑ –ø–æ–≤—Ç–æ—Ä—è–µ–º–æ—Å—Ç–∏."  
  (interactive)
  (let* ((title-raw (read-string "–ù–∞–∑–≤–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏ (–æ–ø—Ü. –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç –ê/–ë/–í/–ì –≤ –∫–æ–Ω—Ü–µ): "))
         ;; –ò—Å–ø–æ–ª—å–∑—É–µ–º –±–æ–ª–µ–µ –Ω–∞–¥—ë–∂–Ω—ã–π —à–∞–±–ª–æ–Ω [[:space:]]
         (priority-char (when (string-match "[[:space:]]\([–ê–ë–í–ì–∞–±–≤–≥]\)$" title-raw)
                          (upcase (match-string 1 title-raw))))
         (priority-code (pcase priority-char
                          ("–ê" "A") ("–ë" "B") ("–í" "C") ("–ì" "D") (_ nil)))
         (title (if priority-code
                    (string-trim-right title-raw "[[:space:]][–ê–ë–í–ì–∞–±–≤–≥]$")
                  title-raw))
         (priority (if priority-code
                       (format "#+PRIORITY: %s\n" priority-code)
                     ""))

         ;; SCHEDULED (–æ–¥–Ω–∞ –¥–∞—Ç–∞, –±–µ–∑ –ø–æ–≤—Ç–æ—Ä–æ–≤)
         (scheduled-date (org-read-date nil nil nil "SCHEDULED (–∏–ª–∏ Enter, –µ—Å–ª–∏ –Ω–µ –Ω—É–∂–Ω–æ):"))
         (scheduled (if (string-empty-p scheduled-date)
                        ""
                      (format "SCHEDULED: <%s>\n" scheduled-date)))

         ;; –ì–µ–Ω–µ—Ä–∞—Ü–∏—è ID
         (id (my/generate-task-id))

         ;; –ß–µ–∫-–ª–∏—Å—Ç (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π)
         (checklist-lines '())
         (item "")
         (_ (while (not (string-empty-p
                         (setq item (read-string "\U0001F4CB –ü—É–Ω–∫—Ç —á–µ–∫-–ª–∏—Å—Ç–∞ (Enter ‚Äî –∑–∞–≤–µ—Ä—à–∏—Ç—å): "))))
              (push (format "- [ ] %s" item) checklist-lines)))
         (checklist (if checklist-lines
                        (concat (string-join (reverse checklist-lines) "\n") "\n")
                      ""))

         ;; –°–±–æ—Ä–∫–∞ –∑–∞–ø–∏—Å–∏
         (entry (concat "* INBOX " title "\n"
                        ":PROPERTIES:\n"
                        ":ID:       " id "\n"
                        ":END:\n"
                        priority
                        scheduled
                        "#+DESCRIPTION:\n#+LINKS:\n"
                        checklist)))

    ;; –í—Å—Ç–∞–≤–∫–∞ –≤ —Ñ–∞–π–ª
    (with-current-buffer (find-file-noselect my/inbox-task-file)
      (goto-char (point-min))
      (if (re-search-forward "^\\* Tasks" nil t)
          (forward-line 1)
        (goto-char (point-min))
        (insert "* Tasks\n"))
      (insert entry "\n")
      (save-buffer))

    (message "\u26A1 –ë—ã—Å—Ç—Ä–∞—è –∑–∞–¥–∞—á–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞: %s" title)))



;; ------------------------------
;; üîó –ì–æ—Ä—è—á–∏–µ –∫–ª–∞–≤–∏—à–∏
;; ------------------------------

(global-set-key (kbd "C-c t c") 'org-todo)
(global-set-key (kbd "C-c t 1") (lambda () (interactive) (org-todo "INBOX")))
(global-set-key (kbd "C-c t 2") (lambda () (interactive) (org-todo "TODO")))
(global-set-key (kbd "C-c t 3") (lambda () (interactive) (org-todo "DONE")))
(global-set-key (kbd "C-c t 4") (lambda () (interactive) (org-todo "LIFE")))
(global-set-key (kbd "C-c t t") 'my/create-task)
(global-set-key (kbd "C-c t e") 'my/quick-capture-task)

(provide 'task_manager-create_task)
