;;; init.el --- –û—Å–Ω–æ–≤–Ω–æ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π —Ñ–∞–π–ª Emacs

;; ------------------------------
;; üìÅ –ü—É—Ç–∏
;; ------------------------------

(add-to-list 'load-path "./")

;; ------------------------------
;; üì¶ –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ use-package
;; ------------------------------

(require 'package)
(setq package-enable-at-startup nil)

(add-to-list 'package-archives
             '("melpa" . "https://melpa.org/packages/") t)

(package-initialize)

(unless (package-installed-p 'use-package)
  (message "üì¶ –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—é use-package...")
  (package-refresh-contents)
  (package-install 'use-package))

(require 'use-package)
(setq use-package-always-ensure t)

;; ------------------------------
;; ‚öôÔ∏è –ë–∞–∑–æ–≤—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ Org
;; ------------------------------

(setq org-log-repeat 'time)
(setq org-todo-repeat-to-state "TODO")
(setq org-transclusion-read-only nil)
(require 'org-transclusion)

;; ------------------------------
;; üß† –ú–æ–¥—É–ª–∏ –∑–∞–¥–∞—á (task manager)
;; ------------------------------

(load-file (expand-file-name "task-manager/task_manager-create_task.el" (file-name-directory load-file-name)))
(load-file (expand-file-name "task-manager/task_manager-organizing_tasks.el" (file-name-directory load-file-name)))
(load-file (expand-file-name "task-manager/task_manager-inbox_task.el" (file-name-directory load-file-name)))
(load-file (expand-file-name "task-manager/task_manager-project_organize_todo.el" (file-name-directory load-file-name)))
(load-file (expand-file-name "task-manager/task_manager-project_organize_life.el" (file-name-directory load-file-name)))
(load-file (expand-file-name "task-manager/task_manager-edit_task.el" (file-name-directory load-file-name)))

;; ------------------------------
;; üìì –õ–∏—á–Ω—ã–π –¥–Ω–µ–≤–Ω–∏–∫ –∏ –æ–±—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
;; ------------------------------

(load (expand-file-name "journal-manager.el" (file-name-directory load-file-name)))
(load (expand-file-name "simple_emacs.el" (file-name-directory load-file-name)))

;; ------------------------------
;; üíæ –ù–∞—Å—Ç—Ä–æ–π–∫–∏, —Å–æ–∑–¥–∞–Ω–Ω—ã–µ —á–µ—Ä–µ–∑ M-x customize
;; ------------------------------

(setq custom-file "custom.el")
(load (expand-file-name custom-file (file-name-directory load-file-name)) 'noerror)

;; ------------------------------
;; üìÖ –§–∞–π–ª—ã –¥–ª—è org-agenda
;; ------------------------------

(setq org-agenda-files
      (list (expand-file-name "../task-tracker/tasks.org" (file-name-directory load-file-name))))
(setq org-agenda-files (append org-agenda-files (directory-files-recursively (expand-file-name "../03_journal/" (file-name-directory load-file-name)) "\\.org$")))

;; ------------------------------
;; üì¶ –ü–∞–∫–µ—Ç—ã (–µ—Å–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–µ—à—å use-package)
;; ------------------------------

;; (require 'package)
;; (package-initialize)

;; (use-package vertico :ensure t)
;; (use-package orderless :ensure t)
;; (use-package org-journal :ensure t)
;; (use-package org-transclusion :ensure t)
;; (use-package which-key :ensure t)
;; (use-package markdown-mode :ensure t)
;; (use-package telega :ensure t)
;; (use-package modus-themes :ensure t)
;; (use-package evil :ensure t)

;;; init.el ends here
